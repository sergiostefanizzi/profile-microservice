openapi: 3.0.3
info:
  title: Microservices Social Network
  version: 1.0.11
  description: >-
    Here are written the API definition for a social network based on
    microservices technologies. This is a master thesis project.
  termsOfService: http://swagger.io/terms/
  contact:
    email: sergio.stefanizzi@finconsgroup.com
    name: Sergio Stefanizzi
servers:
  - url: http://localhost:8084
    variables: {}
    description: Development server
tags:
  - name: profiles
    description: All about profiles
  - name: posts
    description: All about posts
  - name: follows
    description: All about profiles followers and followings
  - name: alerts
    description: All about alerts
  - name: admins
    description: All about admins
paths:
  /profiles:
    post:
      tags:
        - profiles
      summary: Create a profile
      description: create a profile
      operationId: addProfile
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          description: Profile created!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profiles/{profileId}:
    get:
      tags:
        - profiles
      summary: Find a profile
      description: Find a profile by id
      operationId: findProfileById
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Profile id
          required: true
          schema:
            type: integer
            format: int64
        - name: requestProfileId
          in: query
          description: Request Profile id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Profile found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - profiles
      summary: Update a profile
      description: Update a profile by id
      operationId: updateProfileById
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Profile id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfilePatch'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


    delete:
      tags:
        - profiles
      summary: Delete a profile
      description: Delete a profile
      operationId: deleteProfileById
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Id of the profile to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Profile has been successfully deleted!
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profiles/search:
    get:
      tags:
        - profiles
      summary: Search profiles by name
      description: Search profiles by name
      operationId: searchProfileByProfileName
      security:
        - bearerAuth: []
      parameters:
        - name: profileName
          in: query
          description: Profile Name
          required: true
          schema:
            type: string
            maxLength: 20
            #pattern: '[^\s-]'
      responses:
        '200':
          description: Profiles found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /posts:
    post:
      tags:
        - posts
      summary: Publish a new post
      description: Publish a new post
      operationId: addPost
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post has been successfully published!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{postId}:
    get:
      tags:
        - posts
      summary: Find a post
      description: Find a post
      operationId: findPostById
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: Id of the post
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Post found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - posts
      summary: Update post caption
      description: Update post caption
      operationId: updatePostById
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: Id of the post
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPatch'
      responses:
        '200':
          description: Post caption updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - posts
      summary: Delete post
      description: Delete post
      operationId: deletePostById
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: Id of the post
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Post has been successfully deleted!
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/feed/{profileId}:
    get:
      tags:
        - posts
      summary: Feed of the profile
      description: Feed of the profile
      operationId: profileFeedByProfileId
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Id of the profile
          required: true
          schema:
            type: integer
            format: int64
        - name: onlyPost
          in: query
          description: get only post
          schema:
            type: boolean
      responses:
        '200':
          description: Feed found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/likes:
    put:
      tags:
        - posts
      summary: Profile likes a post
      description: Profile likes a post
      operationId: addLike
      security:
        - bearerAuth: []
      parameters:
        - name: removeLike
          in: query
          description: Remove or create the like
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
      responses:
        '204':
          description: Like added or removed
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/likes/{postId}:
    get:
      tags:
        - posts
      summary: List of likes of a post
      description: List of likes of a post
      operationId: findAllLikesByPostId
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: Id of the liked post
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of likes found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/comments:
    post:
      tags:
        - posts
      summary: Profile comments a post
      description: Profile comments a post
      operationId: addComment
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/comments/{commentId}:
    patch:
      tags:
        - posts
      summary: Edit a comment
      description: Edit a comment
      operationId: updateCommentById
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          description: Id of the comment
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPatch'
      responses:
        '200':
          description: Comment has been successfully update!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - posts
      summary: Delete a comment
      description: Delete a comment
      operationId: deleteCommentById
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          description: Id of the comment
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Comment has been successfully deleted!
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/comments/{postId}:
    get:
      tags:
        - posts
      summary: List of comments of a post
      description: List of comments of a post
      operationId: findAllCommentsByPostId
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          description: Id of the post
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of comments found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profiles/{profileId}/follows/{followsId}:
    put:
      tags:
        - follows
      summary: A profile follows or unfollow another profile or
      description: A profile follows another profile
      operationId: addFollows
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Id of the profile that want to follow another profile
          required: true
          schema:
            type: integer
            format: int64
        - name: followsId
          in: path
          description: Id of the profile that another profile want to follow
          required: true
          schema:
            type: integer
            format: int64
        - name: unfollow
          in: query
          description: unfollow
          schema:
            type: boolean
      responses:
        '200':
          description: Follow Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follows'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

        '500':
          $ref: '#/components/responses/InternalServerError'


  /profiles/{profileId}/followedBy/{followsId}:
    put:
      tags:
        - follows
      summary: Accept or reject follow request
      description: Accept or reject follow request
      operationId: acceptFollows
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Id of the private profile
          required: true
          schema:
            type: integer
            format: int64
        - name: followsId
          in: path
          description: Id of the profile that sent the follow request
          required: true
          schema:
            type: integer
            format: int64
        - name: rejectFollow
          in: query
          description: Reject follow request
          schema:
            type: boolean
      responses:
        '200':
          description: Follow Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follows'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /profiles/{profileId}/followedBy:
    get:
      tags:
        - follows
      summary: Get profile followers
      description: Get profile followers
      operationId: findAllFollowers
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Id of the profile
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Followers list returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileFollowList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profiles/{profileId}/follows:
    get:
      tags:
        - follows
      summary: Get profile followings
      description: Get profile followings
      operationId: findAllFollowings
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Id of the profile
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Followings list returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileFollowList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /alerts:
    post:
      tags:
        - alerts
      summary: Send an alert
      description: Send an alert
      operationId: createAlert
      security:
        - bearerAuth: []
      parameters:
        - name: isPost
          in: query
          description: if is a post alert or a comment alert
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
      responses:
        '201':
          description: Alert created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /admins/profiles:
    get:
      tags:
        - admins
      summary: List of all the profiles
      description: List of all the profiles
      operationId: findAllProfiles
      security:
        - bearerAuth: []
      parameters:
        - name: removedProfile
          in: query
          description: Show or not show removed profiles
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: List of all profiles found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileList'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admins/profiles/{profileId}:
    patch:
      tags:
        - admins
      summary: Block a profile
      description: Block a profile
      operationId: blockProfileById
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          description: Id of the profile
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileAdminPatch'
      responses:
        '200':
          description: Profile has been successfully blocked!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'



  /admins/alerts:
    get:
      tags:
        - admins
      summary: List of all the alerts
      description: List of all the alerts
      operationId: findAllAlerts
      security:
        - bearerAuth: []
      parameters:
        - name: alertStatus
          in: query
          description: Show or not show closed alerts
          schema:
            type: string
            enum: [O, C]
      responses:
        '200':
          description: List of all alerts found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertList'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /admins/alerts/{alertId}:
    get:
      tags:
        - admins
      summary: Return an alert
      description: Return an alert
      operationId: findAlertById
      security:
        - bearerAuth: []
      parameters:
        - name: alertId
          in: path
          description: Id of the alert
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Alert found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - admins
      summary: Assign an alert to an admin
      description: Assign an alert to an admin
      operationId: updateAlertById
      security:
        - bearerAuth: []
      parameters:
        - name: alertId
          in: path
          description: Id of the alert
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertPatch'
      responses:
        '200':
          description: Alert has been successfully assigned!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    BadRequest:
      description: Bad Request! Action not performed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorList'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Forbidden'
    Unauthenticated:
      description: Authentication is required!
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Unauthenticated'
    Conflict:
      description: Conflict! Already created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Conflict'
    InternalServerError:
      description: Internal Error Server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'

  schemas:
    Profile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        profile_name:
          type: string
          minLength: 8
          maxLength: 20
          pattern: '^(?=.{8,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$'
        bio:
          type: string
          maxLength: 150
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
        picture_url:
          type: string
          minLength: 3
          maxLength: 2048
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
          #x-url: '@org.hibernate.validator.constraints.URL'
          x-url: '@MyURL'
        is_private:
          type: boolean
        #TODO: con JWT non uso piu' account_id
        blocked_until:
          type: string
          format: date-time
          readOnly: true
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
        account_id:
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          readOnly: true
          description: Account id
      required:
        - profile_name
        - is_private

    FullProfile:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
        post_list:
          $ref: '#/components/schemas/PostList'
        post_count:
          type: integer
          format: int32
          minimum: 0
        profile_granted:
          type: boolean
      required:
        - profile
        - post_list
        - post_count
        - profile_granted

    ProfilePatch:
      type: object
      properties:
        bio:
          type: string
          maxLength: 150
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
        picture_url:
          type: string
          minLength: 3
          maxLength: 2048
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
          x-url: '@MyURL'
        is_private:
          type: boolean

    ProfileAdminPatch:
      type: object
      properties:
        blocked_until:
          type: string
          format: date-time
          x-future: '@Future'
          nullable: true


    Follows:
      type: object
      properties:
        follower_id:
          type: integer
          format: int64
          example: 1
        followed_id:
          type: integer
          format: int64
          example: 2
        request_status:
          type: string
          enum: [ACCEPTED, PENDING, REJECTED]
          readOnly: true
      required:
        - follower_id
        - followed_id
        - request_status

    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        content_url:
          type: string
          minLength: 3
          maxLength: 2048
          example: http://www.contentUrl.com/2342
          x-url: '@MyURL'
        caption:
          type: string
          maxLength: 2200
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
        post_type:
          format: string
          enum: [POST,STORY]
        profile_id:
          type: integer
          format: int64
      required:
        - content_url
        - post_type
        - profile_id

    PostPatch:
      type: object
      properties:
        caption:
          type: string
          maxLength: 2200
      required:
        - caption

    Like:
      type: object
      properties:
        profile_id:
          type: integer
          format: int64
          example: 1
        post_id:
          type: integer
          format: int64
          example: 2
      required:
        - profile_id
        - post_id


    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        profile_id:
          type: integer
          format: int64
        post_id:
          type: integer
          format: int64
        content:
          type: string
          minLength: 1
          maxLength: 2200
          example: comment example
      required:
        - profile_id
        - post_id
        - content

    CommentPatch:
      type: object
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 2200
          example: comment example
      required:
        - content

    Alert:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        created_by:
          type: integer
          format: int64
        post_id:
          type: integer
          format: int64
          nullable: true
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
        comment_id:
          type: integer
          format: int64
          nullable: true
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
        reason:
          type: string
          minLength: 1
          maxLength: 2000
          example: reason example
        managed_by:
          type: integer
          format: int64
          nullable: true
          readOnly: true
          x-nonnull: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)'
      required:
        - created_by
        - reason


    AlertPatch:
      type: object
      properties:
        managed_by:
          type: integer
          format: int64
      required:
        - managed_by

    ProfileFollowList:
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
        profile_count:
          type: integer
          format: int32
      required:
        - profiles
        - profile_count


    ProfileList:
      type: array
      items:
        $ref: '#/components/schemas/Profile'

    PostList:
      type: array
      items:
        $ref: '#/components/schemas/Post'

    Feed:
      type: array
      items:
        $ref: '#/components/schemas/Post'

    LikeList:
      type: array
      items:
        $ref: '#/components/schemas/Like'

    CommentList:
      type: array
      items:
        $ref: '#/components/schemas/Comment'

    AlertList:
      type: array
      items:
        $ref: '#/components/schemas/Alert'

    Error:
      type: object
      properties:
        error:
          type: string
          minLength: 1
          description: Error description
          example: Error description

    ErrorList:
      type: array
      items:
        $ref: '#/components/schemas/Error'
      description: List of errors

    NotFound:
      type: object
      properties:
        error:
          type: string
          minLength: 1
          example: Profile not found
      required:
        - error

    Unauthenticated:
      type: object
      properties:
        error:
          type: string
          minLength: 3
          example: Authentication is required!
    #Action is unauthenticated
    Forbidden:
      type: object
      properties:
        error:
          type: string
          minLength: 3
          example: Action is forbidden!

    Conflict:
      type: object
      properties:
        error:
          type: string
          minLength: 3
          example: Resource already created!


    InternalServerError:
      type: object
      properties:
        error:
          type: string
          minLength: 1
          example: Internal Server Error
      required:
        - error


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT